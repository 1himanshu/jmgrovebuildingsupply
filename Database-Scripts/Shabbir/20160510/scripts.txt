/****** Object:  StoredProcedure [dbo].[UDP_deleteInstalluser]    Script Date: 10-05-2016 14:57:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[UDP_deleteInstalluser]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[UDP_deleteInstalluser]
GO

/****** Object:  StoredProcedure [dbo].[UDP_deleteInstalluser]    Script Date: 10-05-2016 14:57:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[UDP_deleteInstalluser]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[UDP_deleteInstalluser] AS' 
END
GO

ALTER Proc [dbo].[UDP_deleteInstalluser]
@id int,
@result bit output
as
begin
	Set @result ='1'
	UPDATE dbo.tblInstallUsers SET STATUS = 'Deactive' WHERE id = @id
	
/*delete from dbo.tblInstallUsers where Id=@id
  Set @result ='1'
       Begin
       Set @result ='0'      
       end*/
       
        return @result

 end

GO


/****** Object:  StoredProcedure [dbo].[GetAllEditSalesUser]    Script Date: 10-05-2016 16:59:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetAllEditSalesUser]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[GetAllEditSalesUser]
GO

/****** Object:  StoredProcedure [dbo].[GetAllEditSalesUser]    Script Date: 10-05-2016 16:59:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetAllEditSalesUser]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[GetAllEditSalesUser] AS' 
END
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[GetAllEditSalesUser]
	-- Add the parameters for the stored procedure here
	AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	
	SELECT t.Id,t.FristName,t.LastName,t.Phone,t.Zip,t.Designation,t.Status,t.HireDate,t.InstallId,t.picture, t.CreatedDateTime, Isnull(Source,'') AS Source,
	SourceUser, ISNULL(U.Username,'')  AS AddedBy
	FROM tblInstallUsers t 
	LEFT OUTER JOIN tblUsers U ON U.Id = t.SourceUser
	WHERE (t.UserType = 'SalesUser' OR t.UserType = 'sales') AND t.Status <> 'Deactive' 
	ORDER BY Id DESC
	
  --select t.Id,r.InstallerId,t.InstallId,t.FristName,t.LastName,t.HireDate,t.Phone,t.Zip,t.Designation,t.Status,t.Picture 
  --FROM tblInstallUsers t 
	 -- WHERE t.UserType = 'SalesUser' OR t.UserType = 'sales'
	 -- order by Id desc 
 
END


GO


/****** Object:  StoredProcedure [dbo].[UDP_GetallInstallusersdataNew]    Script Date: 10-05-2016 17:43:01 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[UDP_GetallInstallusersdataNew]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[UDP_GetallInstallusersdataNew]
GO

/****** Object:  StoredProcedure [dbo].[UDP_GetallInstallusersdataNew]    Script Date: 10-05-2016 17:43:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[UDP_GetallInstallusersdataNew]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[UDP_GetallInstallusersdataNew] AS' 
END
GO


ALTER ProcEDURE [dbo].[UDP_GetallInstallusersdataNew] 
AS
BEGIN

	SELECT t.Id,t.FristName,t.LastName,t.Phone,t.Zip,t.Designation,t.Status,t.PrimeryTradeId,d.TradeName AS 'PTradeName',t.HireDate,t.InstallId,t.picture,t.CreatedDateTime, Isnull(Source,'') AS Source,
	SourceUser, ISNULL(U.Username,'')  AS AddedBy
	FROM tblInstallUsers t 
	LEFT OUTER JOIN Trades d ON d.Id = t.PrimeryTradeId
	LEFT OUTER JOIN tblUsers U ON U.Id = t.SourceUser
	WHERE  t.Status <> 'Deactive'
	ORDER BY Id DESC
	  
END


GO

/****** Object:  Table [dbo].[tblMaterialPaymentDetails]    Script Date: 12-05-2016 16:45:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tblMaterialPaymentDetails]') AND type in (N'U'))
DROP TABLE [dbo].[tblMaterialPaymentDetails]
GO

/****** Object:  Table [dbo].[tblMaterialPaymentDetails]    Script Date: 12-05-2016 16:45:19 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

SET ANSI_PADDING ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tblMaterialPaymentDetails]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tblMaterialPaymentDetails](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SoldJobID] [varchar](20) NULL,
	[ProductCategoryID] [int] NULL,
	[VendorID] [int] NULL,
	[SubTotal] [float] NULL,
	[DeliveryType] [int] NULL,
	[Delivery] [float] NULL,
	[MiscFee] [float] NULL,
	[Tax] [float] NULL,
 CONSTRAINT [PK_tblMaterialPaymentDetails] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

SET ANSI_PADDING OFF
GO


Update tblCustom_MaterialList set extend = 0; 
ALTER TABLE tblCustom_MaterialList alter column extend float Not Null;
Update tblCustom_MaterialList set extend = isnull(Quantity,0) * isnull(MaterialCost,0);
GO

INSERT INTO tblMaterialPaymentDetails(SoldJobID, ProductCategoryID, VendorID, SubTotal, DeliveryType, Delivery, MiscFee, Tax)
SELECT DISTINCT SoldJobId, ProductCatId,VendorId, SUM(Extend),3,0,0,0 FROM tblCustom_MaterialList 
group by SoldJobId, ProductCatId,VendorId
GO

USE [jgrove_JGP]
GO

/****** Object:  StoredProcedure [dbo].[USP_GetCustomMaterialList]    Script Date: 12-05-2016 14:32:49 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_GetCustomMaterialList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[USP_GetCustomMaterialList]
GO

/****** Object:  StoredProcedure [dbo].[USP_GetCustomMaterialList]    Script Date: 12-05-2016 14:32:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_GetCustomMaterialList]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[USP_GetCustomMaterialList] AS' 
END
GO




-- =============================================
-- Author:		Shabbir Kanchwala
-- Create date: 2016-03-08
-- Description:	This procedure will return custom material list
-- Test Run:    USP_GetCustomMaterialList 'C3690-SJ1', 3690
-- =============================================
ALTER PROCEDURE [dbo].[USP_GetCustomMaterialList]
(
	@soldJobId varchar(50),
	@customerID int
)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

SELECT 
	DISTINCT c.ProductCatID, c.EmailStatus,
	PM.ProductName, 
	'' AS RequestStatus --#Shabbir: Placeholder for business logic
FROM tblCustom_MaterialList c 
INNER JOIN tblProductMaster PM ON PM.productid = c.ProductCatID
WHERE c.SoldJobID = @SoldJobID

SELECT cm.MaterialList
	,cm.VendorCategoryId 
	,vc.VendorCategoryNm
	,v.VendorName  
	,cm.Amount 
	,cm.VendorId 
	,cm.Line 
	,cm.JGSkuPartNo
	,cm.Quantity
	,cm.UOM
	,cm.MaterialCost
	,cm.extend
	,cm.VendorIds
	,cm.Total
	,cd.DocName
	,cd.TempName
	,cm.Id
	,cm.ProductCatID
	,cm.InstallerID
	,cm.RequestStatus
	,cm.EmailStatus
	,ISNULL(cm.DefaultVendorForCategory,0) AS DefaultVendorForCategory
	,PM.ProductName
	,ISNULL(cm.IsForemanPermission,'') as IsForemanPermission
	,ISNULL(cm.IsSrSalemanPermissionF,'') as IsSrSalemanPermissionF
	,ISNULL(cm.IsAdminPermission,'') as IsAdminPermission
	,ISNULL(cm.IsSrSalemanPermissionA,'') as IsSrSalemanPermissionA
	,ISNULL(cm.EmailStatus,'') as EmailStatus
	,ISNULL(up.Id, 0) AS lastUpdatedByID	,ISNULL(up.firstname, '') as lastUpdatedByFirstName, ISNULL(up.LastName, '') as lastUpdatedByLastName, ISNULL(up.Username, '') as lastUpdatedByUserName
	,ISNULL(FM.Id, 0) AS foremanID	,ISNULL(FM.firstname, '') as foremanFirstName, ISNULL(FM.LastName, '') as foremanLastName, ISNULL(FM.Username, '') as foremanUserName
	,ISNULL(SLF.Id, 0) AS SLFID	,ISNULL(SLF.firstname, '') as SLFFirstName, ISNULL(SLF.LastName, '') as SLFLastName, ISNULL(SLF.Username, '') as SLFUserName
	,ISNULL(SLA.Id, 0) AS SLAID	,ISNULL(SLA.firstname, '') as SLAFirstName, ISNULL(SLA.LastName, '') as SLALastName, ISNULL(SLA.Username, '') as SLAUserName
	,ISNULL(AD.Id, 0) AS ADID	,ISNULL(AD.firstname, '') as ADFirstName, ISNULL(AD.LastName, '') as ADLastName, ISNULL(AD.Username, '') as ADUserName
	FROM tblCustom_MaterialList cm 
	LEFT OUTER JOIN tblVendorCategory vc on vc.VendorCategpryId =cm.VendorCategoryId
	LEFT OUTER JOIN tblProductMaster PM ON PM.productid = cm.ProductCatID
	LEFT OUTER JOIN tblVendors v on v.VendorId =cm.VendorId 
	--inner join tblJobSequence js on js.SoldJobId=cm.SoldJobId--js.Id=cm.JobSequenceId 
	LEFT JOIN tblVendorQuotes cd on cd.SoldJobId=cm.SoldJobId and cd.VendorId=cm.VendorId
	-- tblCustomersDocument cd on cd.CustomerId =js.CustomerId and cd.ProductId=js.EstimateId and cd.ProductTypeId=js.ProductId and cd.VendorId=cm.VendorId and cd.DocType= 'VendorQuotes' 
	LEFT OUTER JOIN tblUsers FM on FM.id = cm.ForemanApproverID
	LEFT OUTER JOIN tblUsers SLF on SLF.id = cm.SrSalesFApproverID
	LEFT OUTER JOIN tblUsers SLA on SLA.id = cm.SrSalesAApproverID
	LEFT OUTER JOIN tblUsers AD on AD.id = cm.AdminApproverID
	LEFT OUTER JOIN tblUsers up on up.id = cm.updatedby
	WHERE cm.SoldJobId=@soldJobId
	ORDER BY cm.Id
	
	EXEC UDP_GetSoldJobsForProcurementBySoldJobID @soldJobId   
    
    SELECT IU.Id,IU.FristName +' '+ IU.LastName  as QualifiedName from tblInstallUsers IU Where IU.Status IN ('Active', 'Offer Made') 
	AND NOT EXISTS (Select 1 from tblCustomMaterialInstaller CSI WHERE CSI.SoldJobID = @soldJobId AND IU.Id = CSI.InstallerID)

	SELECT 
		CSI.ID,
		CSI.InstallerID,
		IU.FristName + ' ' + IU.LastName AS QualifiedName,
		CSI.AddedDateTime,
		CSI.UpdatedDateTime 
	FROM tblCustomMaterialInstaller CSI 
	INNER JOIN tblInstallUsers IU ON IU.Id = CSI.InstallerID
	WHERE CSI.SoldJobID = @soldJobId
	
	SELECT 
		pv.ProductCategoryId,
		pv.VendorCategoryId,
		tc.VendorCategoryNm AS VendorCategoryName
	FROM [dbo].[tblProductVendorCat] pv
	INNER JOIN [tblVendorCategory] tc ON pv.VendorCategoryId=tc.[VendorCategpryId]

	SELECT 
		DISTINCT VendorCategpryId,
		VendorCategoryNm, PC.ProductCategoryId 
	FROM tblVendorCategory vc 
	INNER JOIN tblVendors v ON vc.VendorCategpryId =v.VendorCategoryId 
	INNER JOIN tblProductVendorCat PC ON PC.VendorCategoryId = VC.VendorCategpryId
	WHERE vc.VendorCategpryId = v.VendorCategoryId 
	ORDER BY vc.VendorCategoryNm	

	SELECT DISTINCT
		v.VendorId, V.VendorName, V.Email, VC.VendorCategpryId, PC.ProductCategoryId, VC.IsRetail_Wholesale, VC.IsManufacturer
	FROM tblvendors V
	INNER JOIN tbl_Vendor_VendorCat VVC ON VVC.VendorID = V.VendorId 
	INNER JOIN tblVendorCategory VC ON VC.VendorCategpryID = VVC.VendorCatID
	INNER JOIN tblProductVendorCat PC ON PC.VendorCategoryId = VC.VendorCategpryId

	SELECT * FROM tblMaterialListAttachment WHERE SoldJobID = @soldJobId

	SELECT DISTINCT V.VendorID, V.VendorName, C.ProductCatId, MP.SubTotal, MP.DeliveryType, MP.Delivery, MP.MiscFee, MP.Tax,  SUM(Extend) AS SubTotal
	FROM tblVendors V 
	INNER JOIN tblCustom_MaterialList C ON C.VendorId = V.VendorId
	INNER JOIN tblMaterialPaymentDetails MP ON MP.SoldJobID = @soldJobId AND MP.VendorID = V.VendorId AND MP.ProductCategoryID = C.ProductCatId
	WHERE C.SoldJobId = @soldJobId
	GROUP BY V.VendorID, V.VendorName, C.ProductCatId, MP.SubTotal, MP.DeliveryType, MP.Delivery, MP.MiscFee, MP.Tax
END

GO



/****** Object:  StoredProcedure [dbo].[USP_UpdateSpecificProductLine]    Script Date: 12-05-2016 17:15:57 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_UpdateSpecificProductLine]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[USP_UpdateSpecificProductLine]
GO

/****** Object:  StoredProcedure [dbo].[USP_UpdateSpecificProductLine]    Script Date: 12-05-2016 17:15:57 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_UpdateSpecificProductLine]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[USP_UpdateSpecificProductLine] AS' 
END
GO

-- =============================================
-- Author:		Shabbir Kanchwala
-- Create date: 2016-04-19
-- Description:	This procedure will update product line of Custom Material List
-- =============================================
ALTER PROCEDURE [dbo].[USP_UpdateSpecificProductLine]
	@FieldName NVARCHAR(400),
	@Value NVARCHAR(4000),
	@SoldJobID VARCHAR(400),
	@ID INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


	IF(@FieldName = 'JGSkuPartNo')
		UPDATE [tblCustom_MaterialList]
		SET JGSkuPartNo = @Value
		WHERE Id = @ID
	ELSE IF(@FieldName = 'MaterialList')
		UPDATE [tblCustom_MaterialList]
		SET MaterialList = @Value
		WHERE Id = @ID
	ELSE IF(@FieldName = 'Quantity')
		UPDATE [tblCustom_MaterialList]
		SET Quantity = @Value
		WHERE Id = @ID
	ELSE IF(@FieldName = 'UOM')
		UPDATE [tblCustom_MaterialList]
		SET UOM = @Value
		WHERE Id = @ID
	ELSE IF(@FieldName = 'MaterialCost')
		UPDATE [tblCustom_MaterialList]
		SET MaterialCost = @Value
		WHERE Id = @ID
	ELSE IF(@FieldName = 'extend')
		UPDATE [tblCustom_MaterialList]
		SET extend = @Value
		WHERE Id = @ID


DECLARE @ProdCatID INT=0;
DECLARE @VendorID INT=0;
DECLARE @SUBTotal float=0;
SELECT @ProdCatID = ProductCatId, @VendorID=VendorId
FROM tblCustom_MaterialList WHERE ID=@ID

SELECT @SUBTotal = SUM(extend)
FROM tblCustom_MaterialList WHERE SoldJobId=@SoldJobID AND ProductCatId=@ProdCatID AND VendorId = @VendorID

UPDATE tblMaterialPaymentDetails SET SubTotal = @SUBTotal 
WHERE  ProductCategoryId=@ProdCatID AND VendorId = @VendorID AND SoldJobID = @SoldJobID






END


GO



